@Transactional  (tx: )

- isolation : 별도로 정의하지않으면 DB의 isolation level을 따른다.
(isolation level)
-- default : 데이터베이스에 의존
-- uncommitted : commit 되지 않은 데이터 볼 수 있다.
-- committed : commit 된 데이터만 볼 수 있다.
-- repeatable : 새로운 데이터 입력 시 볼 수 있다.
-- serializable : 동일한 데이터에 동시에 두 개 이상의 트랜잭션이 수행될 수 없다.

- propagation : 전파규칙 정의 (기본값 : requierd)
-- required : 기존 트랜잭션이 존재하면 지원, 없으면 새로운 트랜잭션 시작
-- supports : 기존 트랜잭션이 존재하면 지원, 없으면 트랜잭션 없이
-- mandatory : 반드시 트랜잭션 내에서 메소드 실행. 없으면 예외발생
-- required_new : 언제나 새로운 트랜잭션 실행. 기존 트랜잭션 일시정지
-- not_suppoted :  기존 트랜잭션 내에서 실행. 없으면 없이 실행
-- never : mandatory와 반대 (반드시 트랜잭션 외부에서 메소드 실행)
-- nested : 트랜잭션이 @Transactional  (tx: )

- isolation : 별도로 정의하지않으면 DB의 isolation level을 따른다.
(isolation level)
-- default : 데이터베이스에 의존
-- uncommitted : commit 되지 않은 데이터 볼 수 있다.
-- committed : commit 된 데이터만 볼 수 있다.
-- repeatable : 새로운 데이터 입력 시 볼 수 있다.
-- serializable : 동일한 데이터에 동시에 두 개 이상의 트랜잭션이 수행될 수 없다.

- propagation : 전파규칙 정의 (기본값 : requierd)
-- required : 기존 트랜잭션이 존재하면 지원, 없으면 새로운 트랜잭션 시작
-- supports : 기존 트랜잭션이 존재하면 지원, 없으면 트랜잭션 없이
-- mandatory : 반드시 트랜잭션 내에서 메소드 실행. 없으면 예외발생
-- required_new : 언제나 새로운 트랜잭션 실행. 기존 트랜잭션 일시정지
-- not_suppoted :  기존 트랜잭션 내에서 실행. 없으면 없이 실행
-- never : mandatory와 반대 (반드시 트랜잭션 외부에서 메소드 실행)
-- nested : 트랜잭션이 존재하면 중첩되어 실행, 없으면 새로운 트랜잭션 시작

- readOnly : 읽기 전용

- rollbackFor : 정의된 exception에 대해선 rollback 수행 (rollbackFor=Exception.class)

- norollbackFor : 정의된 exception에 대해선 rollback 수행 x

- timeout : 지정한 시간 내에 메소드 수행 완료되지 않으면 rollback (기본값 : -1 // no timeout)
- mybatis 에서 timeout 존재하면 중첩되어 실행, 없으면 새로운 트랜잭션 시작

- readOnly : 읽기 전용

- rollbackFor : 정의된 exception에 대해선 rollback 수행 (rollbackFor=Exception.class)

- norollbackFor : 정의된 exception에 대해선 rollback 수행 x

- timeout : 지정한 시간 내에 메소드 수행 완료되지 않으면 rollback (기본값 : -1 // no timeout)
- mybatis 에서 timeout